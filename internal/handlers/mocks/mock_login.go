// Code generated by MockGen. DO NOT EDIT.
// Source: login.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockloginServicer is a mock of loginServicer interface.
type MockloginServicer struct {
	ctrl     *gomock.Controller
	recorder *MockloginServicerMockRecorder
}

// MockloginServicerMockRecorder is the mock recorder for MockloginServicer.
type MockloginServicerMockRecorder struct {
	mock *MockloginServicer
}

// NewMockloginServicer creates a new mock instance.
func NewMockloginServicer(ctrl *gomock.Controller) *MockloginServicer {
	mock := &MockloginServicer{ctrl: ctrl}
	mock.recorder = &MockloginServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloginServicer) EXPECT() *MockloginServicerMockRecorder {
	return m.recorder
}

// UserAuth mocks base method.
func (m *MockloginServicer) UserAuth(arg0 context.Context, arg1 *models.User) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAuth", arg0, arg1)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAuth indicates an expected call of UserAuth.
func (mr *MockloginServicerMockRecorder) UserAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAuth", reflect.TypeOf((*MockloginServicer)(nil).UserAuth), arg0, arg1)
}

// MockloginJWT is a mock of loginJWT interface.
type MockloginJWT struct {
	ctrl     *gomock.Controller
	recorder *MockloginJWTMockRecorder
}

// MockloginJWTMockRecorder is the mock recorder for MockloginJWT.
type MockloginJWTMockRecorder struct {
	mock *MockloginJWT
}

// NewMockloginJWT creates a new mock instance.
func NewMockloginJWT(ctrl *gomock.Controller) *MockloginJWT {
	mock := &MockloginJWT{ctrl: ctrl}
	mock.recorder = &MockloginJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloginJWT) EXPECT() *MockloginJWTMockRecorder {
	return m.recorder
}

// NewJWTString mocks base method.
func (m *MockloginJWT) NewJWTString(arg0 models.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewJWTString", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewJWTString indicates an expected call of NewJWTString.
func (mr *MockloginJWTMockRecorder) NewJWTString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewJWTString", reflect.TypeOf((*MockloginJWT)(nil).NewJWTString), arg0)
}

// MockerrNoUser is a mock of errNoUser interface.
type MockerrNoUser struct {
	ctrl     *gomock.Controller
	recorder *MockerrNoUserMockRecorder
}

// MockerrNoUserMockRecorder is the mock recorder for MockerrNoUser.
type MockerrNoUserMockRecorder struct {
	mock *MockerrNoUser
}

// NewMockerrNoUser creates a new mock instance.
func NewMockerrNoUser(ctrl *gomock.Controller) *MockerrNoUser {
	mock := &MockerrNoUser{ctrl: ctrl}
	mock.recorder = &MockerrNoUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrNoUser) EXPECT() *MockerrNoUserMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrNoUser) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrNoUserMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrNoUser)(nil).Error))
}

// IsErrNoUser mocks base method.
func (m *MockerrNoUser) IsErrNoUser() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrNoUser")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrNoUser indicates an expected call of IsErrNoUser.
func (mr *MockerrNoUserMockRecorder) IsErrNoUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrNoUser", reflect.TypeOf((*MockerrNoUser)(nil).IsErrNoUser))
}

// MockerrWrongPassword is a mock of errWrongPassword interface.
type MockerrWrongPassword struct {
	ctrl     *gomock.Controller
	recorder *MockerrWrongPasswordMockRecorder
}

// MockerrWrongPasswordMockRecorder is the mock recorder for MockerrWrongPassword.
type MockerrWrongPasswordMockRecorder struct {
	mock *MockerrWrongPassword
}

// NewMockerrWrongPassword creates a new mock instance.
func NewMockerrWrongPassword(ctrl *gomock.Controller) *MockerrWrongPassword {
	mock := &MockerrWrongPassword{ctrl: ctrl}
	mock.recorder = &MockerrWrongPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrWrongPassword) EXPECT() *MockerrWrongPasswordMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrWrongPassword) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrWrongPasswordMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrWrongPassword)(nil).Error))
}

// IsErrWrongPassword mocks base method.
func (m *MockerrWrongPassword) IsErrWrongPassword() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrWrongPassword")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrWrongPassword indicates an expected call of IsErrWrongPassword.
func (mr *MockerrWrongPasswordMockRecorder) IsErrWrongPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrWrongPassword", reflect.TypeOf((*MockerrWrongPassword)(nil).IsErrWrongPassword))
}
