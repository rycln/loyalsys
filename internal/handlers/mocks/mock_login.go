// Code generated by MockGen. DO NOT EDIT.
// Source: login.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockloginServicer is a mock of loginServicer interface.
type MockloginServicer struct {
	ctrl     *gomock.Controller
	recorder *MockloginServicerMockRecorder
}

// MockloginServicerMockRecorder is the mock recorder for MockloginServicer.
type MockloginServicerMockRecorder struct {
	mock *MockloginServicer
}

// NewMockloginServicer creates a new mock instance.
func NewMockloginServicer(ctrl *gomock.Controller) *MockloginServicer {
	mock := &MockloginServicer{ctrl: ctrl}
	mock.recorder = &MockloginServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloginServicer) EXPECT() *MockloginServicerMockRecorder {
	return m.recorder
}

// UserAuth mocks base method.
func (m *MockloginServicer) UserAuth(arg0 context.Context, arg1 *models.User) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAuth", arg0, arg1)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAuth indicates an expected call of UserAuth.
func (mr *MockloginServicerMockRecorder) UserAuth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAuth", reflect.TypeOf((*MockloginServicer)(nil).UserAuth), arg0, arg1)
}
