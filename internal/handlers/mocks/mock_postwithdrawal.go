// Code generated by MockGen. DO NOT EDIT.
// Source: postwithdrawal.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockpostWithdrawalServicer is a mock of postWithdrawalServicer interface.
type MockpostWithdrawalServicer struct {
	ctrl     *gomock.Controller
	recorder *MockpostWithdrawalServicerMockRecorder
}

// MockpostWithdrawalServicerMockRecorder is the mock recorder for MockpostWithdrawalServicer.
type MockpostWithdrawalServicerMockRecorder struct {
	mock *MockpostWithdrawalServicer
}

// NewMockpostWithdrawalServicer creates a new mock instance.
func NewMockpostWithdrawalServicer(ctrl *gomock.Controller) *MockpostWithdrawalServicer {
	mock := &MockpostWithdrawalServicer{ctrl: ctrl}
	mock.recorder = &MockpostWithdrawalServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostWithdrawalServicer) EXPECT() *MockpostWithdrawalServicerMockRecorder {
	return m.recorder
}

// WithdrawalProcessing mocks base method.
func (m *MockpostWithdrawalServicer) WithdrawalProcessing(arg0 context.Context, arg1 *models.Withdrawal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawalProcessing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawalProcessing indicates an expected call of WithdrawalProcessing.
func (mr *MockpostWithdrawalServicerMockRecorder) WithdrawalProcessing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawalProcessing", reflect.TypeOf((*MockpostWithdrawalServicer)(nil).WithdrawalProcessing), arg0, arg1)
}

// MockpostWithdrawalJWT is a mock of postWithdrawalJWT interface.
type MockpostWithdrawalJWT struct {
	ctrl     *gomock.Controller
	recorder *MockpostWithdrawalJWTMockRecorder
}

// MockpostWithdrawalJWTMockRecorder is the mock recorder for MockpostWithdrawalJWT.
type MockpostWithdrawalJWTMockRecorder struct {
	mock *MockpostWithdrawalJWT
}

// NewMockpostWithdrawalJWT creates a new mock instance.
func NewMockpostWithdrawalJWT(ctrl *gomock.Controller) *MockpostWithdrawalJWT {
	mock := &MockpostWithdrawalJWT{ctrl: ctrl}
	mock.recorder = &MockpostWithdrawalJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostWithdrawalJWT) EXPECT() *MockpostWithdrawalJWTMockRecorder {
	return m.recorder
}

// ParseIDFromAuthHeader mocks base method.
func (m *MockpostWithdrawalJWT) ParseIDFromAuthHeader(arg0 string) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIDFromAuthHeader", arg0)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIDFromAuthHeader indicates an expected call of ParseIDFromAuthHeader.
func (mr *MockpostWithdrawalJWTMockRecorder) ParseIDFromAuthHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIDFromAuthHeader", reflect.TypeOf((*MockpostWithdrawalJWT)(nil).ParseIDFromAuthHeader), arg0)
}

// MockerrNotEnoughCurrency is a mock of errNotEnoughCurrency interface.
type MockerrNotEnoughCurrency struct {
	ctrl     *gomock.Controller
	recorder *MockerrNotEnoughCurrencyMockRecorder
}

// MockerrNotEnoughCurrencyMockRecorder is the mock recorder for MockerrNotEnoughCurrency.
type MockerrNotEnoughCurrencyMockRecorder struct {
	mock *MockerrNotEnoughCurrency
}

// NewMockerrNotEnoughCurrency creates a new mock instance.
func NewMockerrNotEnoughCurrency(ctrl *gomock.Controller) *MockerrNotEnoughCurrency {
	mock := &MockerrNotEnoughCurrency{ctrl: ctrl}
	mock.recorder = &MockerrNotEnoughCurrencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrNotEnoughCurrency) EXPECT() *MockerrNotEnoughCurrencyMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrNotEnoughCurrency) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrNotEnoughCurrencyMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrNotEnoughCurrency)(nil).Error))
}

// IsErrNotEnoughCurrency mocks base method.
func (m *MockerrNotEnoughCurrency) IsErrNotEnoughCurrency() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrNotEnoughCurrency")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrNotEnoughCurrency indicates an expected call of IsErrNotEnoughCurrency.
func (mr *MockerrNotEnoughCurrencyMockRecorder) IsErrNotEnoughCurrency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrNotEnoughCurrency", reflect.TypeOf((*MockerrNotEnoughCurrency)(nil).IsErrNotEnoughCurrency))
}

// MockerrWrongOrderNum is a mock of errWrongOrderNum interface.
type MockerrWrongOrderNum struct {
	ctrl     *gomock.Controller
	recorder *MockerrWrongOrderNumMockRecorder
}

// MockerrWrongOrderNumMockRecorder is the mock recorder for MockerrWrongOrderNum.
type MockerrWrongOrderNumMockRecorder struct {
	mock *MockerrWrongOrderNum
}

// NewMockerrWrongOrderNum creates a new mock instance.
func NewMockerrWrongOrderNum(ctrl *gomock.Controller) *MockerrWrongOrderNum {
	mock := &MockerrWrongOrderNum{ctrl: ctrl}
	mock.recorder = &MockerrWrongOrderNumMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrWrongOrderNum) EXPECT() *MockerrWrongOrderNumMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrWrongOrderNum) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrWrongOrderNumMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrWrongOrderNum)(nil).Error))
}

// IsErrWrongOrderNum mocks base method.
func (m *MockerrWrongOrderNum) IsErrWrongOrderNum() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrWrongOrderNum")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrWrongOrderNum indicates an expected call of IsErrWrongOrderNum.
func (mr *MockerrWrongOrderNumMockRecorder) IsErrWrongOrderNum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrWrongOrderNum", reflect.TypeOf((*MockerrWrongOrderNum)(nil).IsErrWrongOrderNum))
}
