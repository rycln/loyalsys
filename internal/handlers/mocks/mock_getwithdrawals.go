// Code generated by MockGen. DO NOT EDIT.
// Source: getwithdrawals.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockgetWithdrawalsServicer is a mock of getWithdrawalsServicer interface.
type MockgetWithdrawalsServicer struct {
	ctrl     *gomock.Controller
	recorder *MockgetWithdrawalsServicerMockRecorder
}

// MockgetWithdrawalsServicerMockRecorder is the mock recorder for MockgetWithdrawalsServicer.
type MockgetWithdrawalsServicerMockRecorder struct {
	mock *MockgetWithdrawalsServicer
}

// NewMockgetWithdrawalsServicer creates a new mock instance.
func NewMockgetWithdrawalsServicer(ctrl *gomock.Controller) *MockgetWithdrawalsServicer {
	mock := &MockgetWithdrawalsServicer{ctrl: ctrl}
	mock.recorder = &MockgetWithdrawalsServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetWithdrawalsServicer) EXPECT() *MockgetWithdrawalsServicerMockRecorder {
	return m.recorder
}

// GetUserWithdrawals mocks base method.
func (m *MockgetWithdrawalsServicer) GetUserWithdrawals(arg0 context.Context, arg1 models.UserID) ([]*models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]*models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockgetWithdrawalsServicerMockRecorder) GetUserWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockgetWithdrawalsServicer)(nil).GetUserWithdrawals), arg0, arg1)
}

// MockgetWithdrawalsJWT is a mock of getWithdrawalsJWT interface.
type MockgetWithdrawalsJWT struct {
	ctrl     *gomock.Controller
	recorder *MockgetWithdrawalsJWTMockRecorder
}

// MockgetWithdrawalsJWTMockRecorder is the mock recorder for MockgetWithdrawalsJWT.
type MockgetWithdrawalsJWTMockRecorder struct {
	mock *MockgetWithdrawalsJWT
}

// NewMockgetWithdrawalsJWT creates a new mock instance.
func NewMockgetWithdrawalsJWT(ctrl *gomock.Controller) *MockgetWithdrawalsJWT {
	mock := &MockgetWithdrawalsJWT{ctrl: ctrl}
	mock.recorder = &MockgetWithdrawalsJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetWithdrawalsJWT) EXPECT() *MockgetWithdrawalsJWTMockRecorder {
	return m.recorder
}

// ParseIDFromAuthHeader mocks base method.
func (m *MockgetWithdrawalsJWT) ParseIDFromAuthHeader(arg0 string) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIDFromAuthHeader", arg0)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIDFromAuthHeader indicates an expected call of ParseIDFromAuthHeader.
func (mr *MockgetWithdrawalsJWTMockRecorder) ParseIDFromAuthHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIDFromAuthHeader", reflect.TypeOf((*MockgetWithdrawalsJWT)(nil).ParseIDFromAuthHeader), arg0)
}

// MockerrNoWithdrawal is a mock of errNoWithdrawal interface.
type MockerrNoWithdrawal struct {
	ctrl     *gomock.Controller
	recorder *MockerrNoWithdrawalMockRecorder
}

// MockerrNoWithdrawalMockRecorder is the mock recorder for MockerrNoWithdrawal.
type MockerrNoWithdrawalMockRecorder struct {
	mock *MockerrNoWithdrawal
}

// NewMockerrNoWithdrawal creates a new mock instance.
func NewMockerrNoWithdrawal(ctrl *gomock.Controller) *MockerrNoWithdrawal {
	mock := &MockerrNoWithdrawal{ctrl: ctrl}
	mock.recorder = &MockerrNoWithdrawalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrNoWithdrawal) EXPECT() *MockerrNoWithdrawalMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrNoWithdrawal) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrNoWithdrawalMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrNoWithdrawal)(nil).Error))
}

// IsErrNoWithdrawal mocks base method.
func (m *MockerrNoWithdrawal) IsErrNoWithdrawal() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrNoWithdrawal")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrNoWithdrawal indicates an expected call of IsErrNoWithdrawal.
func (mr *MockerrNoWithdrawalMockRecorder) IsErrNoWithdrawal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrNoWithdrawal", reflect.TypeOf((*MockerrNoWithdrawal)(nil).IsErrNoWithdrawal))
}
