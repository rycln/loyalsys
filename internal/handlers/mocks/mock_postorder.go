// Code generated by MockGen. DO NOT EDIT.
// Source: postorder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockpostOrderServicer is a mock of postOrderServicer interface.
type MockpostOrderServicer struct {
	ctrl     *gomock.Controller
	recorder *MockpostOrderServicerMockRecorder
}

// MockpostOrderServicerMockRecorder is the mock recorder for MockpostOrderServicer.
type MockpostOrderServicerMockRecorder struct {
	mock *MockpostOrderServicer
}

// NewMockpostOrderServicer creates a new mock instance.
func NewMockpostOrderServicer(ctrl *gomock.Controller) *MockpostOrderServicer {
	mock := &MockpostOrderServicer{ctrl: ctrl}
	mock.recorder = &MockpostOrderServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpostOrderServicer) EXPECT() *MockpostOrderServicerMockRecorder {
	return m.recorder
}

// SaveOrder mocks base method.
func (m *MockpostOrderServicer) SaveOrder(arg0 context.Context, arg1 *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrder indicates an expected call of SaveOrder.
func (mr *MockpostOrderServicerMockRecorder) SaveOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrder", reflect.TypeOf((*MockpostOrderServicer)(nil).SaveOrder), arg0, arg1)
}
