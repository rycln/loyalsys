// Code generated by MockGen. DO NOT EDIT.
// Source: getorders.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockgetOrdersServicer is a mock of getOrdersServicer interface.
type MockgetOrdersServicer struct {
	ctrl     *gomock.Controller
	recorder *MockgetOrdersServicerMockRecorder
}

// MockgetOrdersServicerMockRecorder is the mock recorder for MockgetOrdersServicer.
type MockgetOrdersServicerMockRecorder struct {
	mock *MockgetOrdersServicer
}

// NewMockgetOrdersServicer creates a new mock instance.
func NewMockgetOrdersServicer(ctrl *gomock.Controller) *MockgetOrdersServicer {
	mock := &MockgetOrdersServicer{ctrl: ctrl}
	mock.recorder = &MockgetOrdersServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetOrdersServicer) EXPECT() *MockgetOrdersServicerMockRecorder {
	return m.recorder
}

// GetUserOrders mocks base method.
func (m *MockgetOrdersServicer) GetUserOrders(arg0 context.Context, arg1 models.UserID) ([]*models.OrderDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0, arg1)
	ret0, _ := ret[0].([]*models.OrderDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockgetOrdersServicerMockRecorder) GetUserOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockgetOrdersServicer)(nil).GetUserOrders), arg0, arg1)
}

// MockgetOrdersJWT is a mock of getOrdersJWT interface.
type MockgetOrdersJWT struct {
	ctrl     *gomock.Controller
	recorder *MockgetOrdersJWTMockRecorder
}

// MockgetOrdersJWTMockRecorder is the mock recorder for MockgetOrdersJWT.
type MockgetOrdersJWTMockRecorder struct {
	mock *MockgetOrdersJWT
}

// NewMockgetOrdersJWT creates a new mock instance.
func NewMockgetOrdersJWT(ctrl *gomock.Controller) *MockgetOrdersJWT {
	mock := &MockgetOrdersJWT{ctrl: ctrl}
	mock.recorder = &MockgetOrdersJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetOrdersJWT) EXPECT() *MockgetOrdersJWTMockRecorder {
	return m.recorder
}

// ParseIDFromAuthHeader mocks base method.
func (m *MockgetOrdersJWT) ParseIDFromAuthHeader(arg0 string) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseIDFromAuthHeader", arg0)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseIDFromAuthHeader indicates an expected call of ParseIDFromAuthHeader.
func (mr *MockgetOrdersJWTMockRecorder) ParseIDFromAuthHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseIDFromAuthHeader", reflect.TypeOf((*MockgetOrdersJWT)(nil).ParseIDFromAuthHeader), arg0)
}

// MockerrNoOrder is a mock of errNoOrder interface.
type MockerrNoOrder struct {
	ctrl     *gomock.Controller
	recorder *MockerrNoOrderMockRecorder
}

// MockerrNoOrderMockRecorder is the mock recorder for MockerrNoOrder.
type MockerrNoOrderMockRecorder struct {
	mock *MockerrNoOrder
}

// NewMockerrNoOrder creates a new mock instance.
func NewMockerrNoOrder(ctrl *gomock.Controller) *MockerrNoOrder {
	mock := &MockerrNoOrder{ctrl: ctrl}
	mock.recorder = &MockerrNoOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrNoOrder) EXPECT() *MockerrNoOrderMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrNoOrder) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrNoOrderMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrNoOrder)(nil).Error))
}

// IsErrNoOrder mocks base method.
func (m *MockerrNoOrder) IsErrNoOrder() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrNoOrder")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrNoOrder indicates an expected call of IsErrNoOrder.
func (mr *MockerrNoOrderMockRecorder) IsErrNoOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrNoOrder", reflect.TypeOf((*MockerrNoOrder)(nil).IsErrNoOrder))
}
