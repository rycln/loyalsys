// Code generated by MockGen. DO NOT EDIT.
// Source: getorders.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockgetOrderServicer is a mock of getOrderServicer interface.
type MockgetOrderServicer struct {
	ctrl     *gomock.Controller
	recorder *MockgetOrderServicerMockRecorder
}

// MockgetOrderServicerMockRecorder is the mock recorder for MockgetOrderServicer.
type MockgetOrderServicerMockRecorder struct {
	mock *MockgetOrderServicer
}

// NewMockgetOrderServicer creates a new mock instance.
func NewMockgetOrderServicer(ctrl *gomock.Controller) *MockgetOrderServicer {
	mock := &MockgetOrderServicer{ctrl: ctrl}
	mock.recorder = &MockgetOrderServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetOrderServicer) EXPECT() *MockgetOrderServicerMockRecorder {
	return m.recorder
}

// GetUserOrders mocks base method.
func (m *MockgetOrderServicer) GetUserOrders(arg0 context.Context, arg1 models.UserID) ([]*models.OrderDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", arg0, arg1)
	ret0, _ := ret[0].([]*models.OrderDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockgetOrderServicerMockRecorder) GetUserOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockgetOrderServicer)(nil).GetUserOrders), arg0, arg1)
}
