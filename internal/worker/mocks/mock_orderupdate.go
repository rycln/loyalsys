// Code generated by MockGen. DO NOT EDIT.
// Source: orderupdate.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MockupdateStorager is a mock of updateStorager interface.
type MockupdateStorager struct {
	ctrl     *gomock.Controller
	recorder *MockupdateStoragerMockRecorder
}

// MockupdateStoragerMockRecorder is the mock recorder for MockupdateStorager.
type MockupdateStoragerMockRecorder struct {
	mock *MockupdateStorager
}

// NewMockupdateStorager creates a new mock instance.
func NewMockupdateStorager(ctrl *gomock.Controller) *MockupdateStorager {
	mock := &MockupdateStorager{ctrl: ctrl}
	mock.recorder = &MockupdateStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockupdateStorager) EXPECT() *MockupdateStoragerMockRecorder {
	return m.recorder
}

// UpdateOrdersBatch mocks base method.
func (m *MockupdateStorager) UpdateOrdersBatch(arg0 context.Context, arg1 []*models.OrderDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersBatch indicates an expected call of UpdateOrdersBatch.
func (mr *MockupdateStoragerMockRecorder) UpdateOrdersBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersBatch", reflect.TypeOf((*MockupdateStorager)(nil).UpdateOrdersBatch), arg0, arg1)
}
