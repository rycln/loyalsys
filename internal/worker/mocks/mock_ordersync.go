// Code generated by MockGen. DO NOT EDIT.
// Source: ordersync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rycln/loyalsys/internal/models"
)

// MocksyncAPI is a mock of syncAPI interface.
type MocksyncAPI struct {
	ctrl     *gomock.Controller
	recorder *MocksyncAPIMockRecorder
}

// MocksyncAPIMockRecorder is the mock recorder for MocksyncAPI.
type MocksyncAPIMockRecorder struct {
	mock *MocksyncAPI
}

// NewMocksyncAPI creates a new mock instance.
func NewMocksyncAPI(ctrl *gomock.Controller) *MocksyncAPI {
	mock := &MocksyncAPI{ctrl: ctrl}
	mock.recorder = &MocksyncAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksyncAPI) EXPECT() *MocksyncAPIMockRecorder {
	return m.recorder
}

// GetOrderFromAccrual mocks base method.
func (m *MocksyncAPI) GetOrderFromAccrual(arg0 context.Context, arg1 string) (*models.OrderAccrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderFromAccrual", arg0, arg1)
	ret0, _ := ret[0].(*models.OrderAccrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderFromAccrual indicates an expected call of GetOrderFromAccrual.
func (mr *MocksyncAPIMockRecorder) GetOrderFromAccrual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderFromAccrual", reflect.TypeOf((*MocksyncAPI)(nil).GetOrderFromAccrual), arg0, arg1)
}

// MocksyncStorager is a mock of syncStorager interface.
type MocksyncStorager struct {
	ctrl     *gomock.Controller
	recorder *MocksyncStoragerMockRecorder
}

// MocksyncStoragerMockRecorder is the mock recorder for MocksyncStorager.
type MocksyncStoragerMockRecorder struct {
	mock *MocksyncStorager
}

// NewMocksyncStorager creates a new mock instance.
func NewMocksyncStorager(ctrl *gomock.Controller) *MocksyncStorager {
	mock := &MocksyncStorager{ctrl: ctrl}
	mock.recorder = &MocksyncStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksyncStorager) EXPECT() *MocksyncStoragerMockRecorder {
	return m.recorder
}

// GetInconclusiveOrderNums mocks base method.
func (m *MocksyncStorager) GetInconclusiveOrderNums(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInconclusiveOrderNums", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInconclusiveOrderNums indicates an expected call of GetInconclusiveOrderNums.
func (mr *MocksyncStoragerMockRecorder) GetInconclusiveOrderNums(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInconclusiveOrderNums", reflect.TypeOf((*MocksyncStorager)(nil).GetInconclusiveOrderNums), arg0)
}

// UpdateOrdersBatch mocks base method.
func (m *MocksyncStorager) UpdateOrdersBatch(arg0 context.Context, arg1 []*models.OrderDB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrdersBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrdersBatch indicates an expected call of UpdateOrdersBatch.
func (mr *MocksyncStoragerMockRecorder) UpdateOrdersBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrdersBatch", reflect.TypeOf((*MocksyncStorager)(nil).UpdateOrdersBatch), arg0, arg1)
}

// MockerrRetryAfter is a mock of errRetryAfter interface.
type MockerrRetryAfter struct {
	ctrl     *gomock.Controller
	recorder *MockerrRetryAfterMockRecorder
}

// MockerrRetryAfterMockRecorder is the mock recorder for MockerrRetryAfter.
type MockerrRetryAfterMockRecorder struct {
	mock *MockerrRetryAfter
}

// NewMockerrRetryAfter creates a new mock instance.
func NewMockerrRetryAfter(ctrl *gomock.Controller) *MockerrRetryAfter {
	mock := &MockerrRetryAfter{ctrl: ctrl}
	mock.recorder = &MockerrRetryAfterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockerrRetryAfter) EXPECT() *MockerrRetryAfterMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockerrRetryAfter) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockerrRetryAfterMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockerrRetryAfter)(nil).Error))
}

// GetRetryAfterDuration mocks base method.
func (m *MockerrRetryAfter) GetRetryAfterDuration() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetryAfterDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetRetryAfterDuration indicates an expected call of GetRetryAfterDuration.
func (mr *MockerrRetryAfterMockRecorder) GetRetryAfterDuration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetryAfterDuration", reflect.TypeOf((*MockerrRetryAfter)(nil).GetRetryAfterDuration))
}

// IsErrRetryAfter mocks base method.
func (m *MockerrRetryAfter) IsErrRetryAfter() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsErrRetryAfter")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsErrRetryAfter indicates an expected call of IsErrRetryAfter.
func (mr *MockerrRetryAfterMockRecorder) IsErrRetryAfter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsErrRetryAfter", reflect.TypeOf((*MockerrRetryAfter)(nil).IsErrRetryAfter))
}
